name: build
on:
  push:
    branches:
      - deploy
      
jobs:
  aqua:
    name: Aqua scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Aqua scanner
        uses: docker://aquasec/aqua-scanner
        with:
          args: trivy -d fs --scanners config,vuln,secret . --sast --reachability
          # To customize which severities to scan for, add the following flag: --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          # To enable SAST scanning, add: --sast
          # To enable npm/dotnet non-lock file scanning, add: --package-json / --dotnet-proj
        env:
          AQUA_KEY: ${{ secrets.AQUA_KEY }}
          AQUA_SECRET: ${{ secrets.AQUA_SECRET }}
          TRIVY_RUN_AS_PLUGIN: 'aqua'
          #SAST: 1
  build:
    name: build image & push to ECR
    runs-on: ubuntu-latest
    needs: aqua
    permissions:
          id-token: write
    env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Build image locally
        run: |
          pwd
          ls -la
          docker build -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" ..
      - name: Manifest Generation
        run: |
          curl -sLo install.sh download.codesec.aquasec.com/billy/install.sh
          curl -sLo install.sh.checksum https://github.com/argonsecurity/releases/releases/latest/download/install.sh.checksum
          if ! cat install.sh.checksum | shasum -a 256 ; then
            echo "install.sh checksum failed"
            exit 1
          fi
          sh install.sh
          rm install.sh install.sh.checksum
          billy generate \
              --access-token "${{ secrets.GITHUB_TOKEN }}" \
              --aqua-key "${{ secrets.AQUA_KEY }}" \
              --aqua-secret "${{ secrets.AQUA_SECRET }}" \
              --artifact-path "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Tag and push image to Amazon ECR
        run: |          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  deploy:
    name: deploy to k8s
    runs-on: ubuntu-latest
    needs: build
    permissions:
          id-token: write
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
          role-session-name: GitHubActions
